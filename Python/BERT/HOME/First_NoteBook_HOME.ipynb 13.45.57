{
 "metadata": {
  "name": "First_NoteBook_HOME"
 },
 "nbformat": 3,
 "nbformat_minor": 0,
 "worksheets": [
  {
   "cells": [
    {
     "cell_type": "code",
     "collapsed": false,
     "input": "%pylab inline",
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": "\nWelcome to pylab, a matplotlib-based Python environment [backend: module://IPython.zmq.pylab.backend_inline].\nFor more information, type 'help(pylab)'.\n"
      }
     ],
     "prompt_number": 178
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom scipy.optimize import curve_fit",
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 179
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": "# >>> import itertools as it\n",
     "language": "python",
     "metadata": {},
     "outputs": []
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": "%cd /Users/burbol/Desktop/Testing/files_for_laila/densmaps_berendsen",
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": "/Users/burbol/Desktop/Testing/files_for_laila/densmaps_berendsen\n"
      }
     ],
     "prompt_number": 180
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": "%cd densmaps_s5_w2000/",
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": "/Users/burbol/Desktop/Testing/files_for_laila/densmaps_berendsen/densmaps_s5_w2000\n"
      }
     ],
     "prompt_number": 181
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": "input = np.loadtxt(\"densmap_5pc_2000_12ns_14ns.dat\")",
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 182
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": "x = input[0]",
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 183
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": "def checkzero(s):\n    i = len(np.transpose(np.nonzero(s)))\n    if i > 1: \n        return True\n    else: \n         return False",
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 184
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": "zeroslice = 0\nfor slice in range(70,150):\n    y = input[slice]\n    if checkzero(y): \n       zeroslice = slice\n       print zeroslice\n       break\n    else: continue",
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": "91\n"
      }
     ],
     "prompt_number": 185
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": "slice = 107\ny = input[slice]\nplt.plot(x,y)\nplt.axis([0.05, 5, 0, 150])\nplt.show()",
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "display_data",
       "png": "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\nrkJggg==\n"
      }
     ],
     "prompt_number": 186
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": "def func(r, ro, R, d):\n    return (ro/2)*(1-np.tanh(2*(r-R)/d))",
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 187
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": "popt, pcov = curve_fit(func, x, y,[100, 3, 1])\nprint popt",
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": "[ 102.3946393     2.31759995    0.51247039]\n"
      }
     ],
     "prompt_number": 188
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": "import pylab as pl\npl.plot(x, func(x, *popt), 'r-')\npl.plot(x,y,'k.')",
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "pyout",
       "prompt_number": 189,
       "text": "[<matplotlib.lines.Line2D at 0xa18fd50>]"
      },
      {
       "output_type": "display_data",
       "png": "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\nAAAAAElFTkSuQmCC\n"
      }
     ],
     "prompt_number": 189
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": "k = func(0,*popt)\nprint k",
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": "102.394637875\n"
      }
     ],
     "prompt_number": 190
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": "def checkslice(s):\n    popt, pcov = curve_fit(func, x, s,[100, 3, 1])\n    k = func(0,*popt)\n    if k > 90:\n        return True\n    else: \n        return False",
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 193
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": "slicemin = 0\nfor slice in range(70,150):\n    y = input[slice]\n    if checkslice(y): \n       slicemin = slice\n       print slicemin\n       break\n    else: continue",
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": "98\n"
      }
     ],
     "prompt_number": 194
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": "slicemax = 0\nfor slice in range(200,130,-1):\n    y = input[slice]\n    if checkslice(y): \n       slicemax = slice\n       print slicemax\n       break\n    else: continue",
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": "171\n"
      }
     ],
     "prompt_number": 195
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": "slicemin2 = slicemin + 16\nprint zeroslice, slicemin, slicemin2, slicemax\ny = input[zeroslice]\nshift = y[0]\nprint shift",
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": "91 98 114 171\n-0.5\n"
      }
     ],
     "prompt_number": 197
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": "dims = slicemax - slicemin2 + 1\nmaxdim = slicemax + 1\ni=0\nz = np.zeros(dims)\nR = np.zeros(dims)\nw = np.zeros(dims)\nfor a in range(slicemin2, maxdim):\n    y2 = input[a]\n    i = a - slicemin2\n    z[i] = y2[0] - shift\n#    w[i] = 0.05*(a - 1) - 5.0 - shift -> Ahother way to determine z\n    params, pcov2 = curve_fit(func, x, y2,[100, 3, 1])\n    R[i] = params[1]\npl.plot(z, R, 'k.')",
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "pyout",
       "prompt_number": 199,
       "text": "[<matplotlib.lines.Line2D at 0xa28a810>]"
      },
      {
       "output_type": "display_data",
       "png": "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\n"
      }
     ],
     "prompt_number": 199
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": "#  == LEAST SQUARES CIRCLE ==\n# Advanced usage of optimize.leastsq with jacobian\n\nmethod  = \"leastsq with jacobian\"\nfrom scipy    import optimize\n\n# coordinates of the barycenter\nx_m = mean(z)\ny_m = mean(R)\n\ndef calc_R(xc, yc):\n    \"\"\" calculate the distance of each data points from the center (xc, yc) \"\"\"\n    return sqrt((z-xc)**2 + (R-yc)**2)\n\ndef f(c):\n    \"\"\" calculate the algebraic distance between the 2D points and the mean circle centered at c=(xc, yc) \"\"\"\n    Ri = calc_R(*c)\n    return Ri - Ri.mean()\n\ndef Df(c):\n    \"\"\" Jacobian of f\n    The axis corresponding to derivatives must be coherent with the col_deriv option of leastsq\"\"\"\n    xc, yc     = c\n    df_dc    = empty((len(c), z.size))\n\n    Ri = calc_R(xc, yc)\n    df_dc[ 0] = (xc - z)/Ri                   # dR/dxc\n    df_dc[ 1] = (yc - R)/Ri                   # dR/dyc\n    df_dc       = df_dc - df_dc.mean(axis=1)[:, newaxis]\n\n    return df_dc\n\ncenter_estimate = x_m, y_m\ncenter, ier = optimize.leastsq(f, center_estimate, Dfun=Df, col_deriv=True)\n\nxc, yc = center\nRi        = calc_R(xc, yc)\nR_2       = Ri.mean()\nresidu    = sum((Ri - R_2)**2)",
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 177
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": "print xc, yc, R_2, x_m",
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": "1.61670321984 0.153878175232 1.89168676443 1.99999999818\n"
      }
     ],
     "prompt_number": 163
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": "theta_fit = linspace(-pi, pi, 180)\nx_fit2 = xc + R_2*cos(theta_fit)\ny_fit2 = yc + R_2*sin(theta_fit)\npl.plot(x_fit2, y_fit2, color=\"blue\", label=method, lw=2)\n# plot(X, C, color=\"blue\", linewidth=2.5, linestyle=\"-\")\n# Set x limits\nxlim(0,4.0)\n# Set y limits\nylim(0,3)\npl.plot(z, R, 'k.')",
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "pyout",
       "prompt_number": 172,
       "text": "[<matplotlib.lines.Line2D at 0x9a89af0>]"
      },
      {
       "output_type": "display_data",
       "png": "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\n"
      }
     ],
     "prompt_number": 172
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": "def angle(R, m):\n    t = m / np.sqrt(R**2 - m**2)\n    t2 = math.degrees(np.arctan(t)) + 90\n    return t2",
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 173
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": "def radius(R, m):\n    r = np.sqrt(R**2 - m**2)\n    return r",
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 174
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": "theta = angle(R_2, xc)\nbase_r = radius(R_2, xc)\nprint \"The Contact Angle is  \", theta\nprint \"The base radius is  \", base_r",
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": "The Contact Angle is   148.719522135\nThe base radius is   0.982216632765\n"
      }
     ],
     "prompt_number": 175
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": "",
     "language": "python",
     "metadata": {},
     "outputs": []
    }
   ],
   "metadata": {}
  }
 ]
}