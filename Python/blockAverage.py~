def blockAverage(datastream, maxBlockSize):
 
  Nobs         = np.len(datastream)           # total number of observations in datastream
  minBlockSize = 1                            # min: 1 observation/block

  NumBlocks = maxBlockSize - minBlockSize + 1    # total number of block sizes

  blockMean = zeros(NumBlocks,1)                   # mean (expect to be "nearly" constant)
  blockVar  = zeros(NumBlocks,1)                   # variance associated with each blockSize
  blockCtr  = 1
				#
				#  blockSize is # observations/block
				#  run them through all the possibilities
				#

  for blockSize in range(minBlockSize,maxBlockSize+1):

    Nblock    = math.floor(Nobs/blockSize)              # total number of such blocks in datastream
    obsProp   = np.zeros[Nblock]                    # container for parcelling block 
 				
				# Loop to chop datastream into blocks
				# and take average
    for i in range(1,Nblock+1):
      ibeg = (i-1)*blockSize + 1
      iend =  ibeg + blockSize - 1
      obsProp[i-1] = np.mean(datastream[(ibeg-1):iend])


    blockMean[blockCtr-1] = mean(obsProp)
    blockVar[blockCtr-1] = var(obsProp)/(Nblock - 1)
    blockCtr = blockCtr + 1
    
  v=range(minBlockSize,(maxBlockSize+1))